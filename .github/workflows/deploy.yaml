jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      # Step 0: Init CodeQL
      - name: Init CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: csharp

      # Step 1: Checkout Code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Setup .NET
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 9.x

      # Step 3: Restore Dependencies
      - name: Restore Dependencies
        run: dotnet restore midnight.sln

      # Step 4: Build Solution
      - name: Build Solution
        run: dotnet build midnight.sln --no-restore --configuration Release

      # Step 5: Run Unit Tests
      - name: Run Unit Tests
        run: dotnet test --no-build --configuration Release --collect:"XPlat Code Coverage"

      # Step 6: Perform CodeQL Analysis
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      # Step 7: Upload Build Artifacts for Next Job
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: compiled-app
          path: ./midnight/Barstation/bin/Release  # Adjust path to your built files

  push-docker:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout Code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up Docker
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 3: Check Runner Architecture
      - name: Check runner architecture
        run: uname -m

      # Step 4: Set up QEMU (for ARM emulation)
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # Step 5: Download Prebuilt Artifacts
      - name: Download Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: compiled-app
          path: ./midnight/Barstation/bin/Release  # Ensure path matches previous upload

      # Step 6: Build and Push Docker Image (using artifacts)
      - name: Build and Push Docker Image
        run: |
          docker buildx create --use --name arm-builder
          docker buildx build --platform linux/arm/v7 -t ${{secrets.DOCKER_USERNAME}}/barstation:latest -f ./Docker/Dockerfile .
          docker push ${{secrets.DOCKER_USERNAME}}/barstation:latest